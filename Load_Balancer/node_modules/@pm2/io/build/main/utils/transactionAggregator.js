'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Debug = require("debug");
var eventemitter2_1 = require("eventemitter2");
var EWMA_1 = require("./EWMA");
var histogram_1 = require("./metrics/histogram");
var fclone = function (data) { return JSON.parse(JSON.stringify(data)); };
var log = Debug('axm:features:tracing:aggregator');
var TransactionAggregator = (function (_super) {
    tslib_1.__extends(TransactionAggregator, _super);
    function TransactionAggregator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.spanTypes = ['redis', 'mysql', 'pg', 'mongo', 'outbound_http'];
        _this.cache = {
            routes: {},
            meta: {
                trace_count: 0,
                http_meter: new EWMA_1.default(),
                db_meter: new EWMA_1.default(),
                histogram: new histogram_1.default({ measurement: 'median' }),
                db_histograms: {}
            }
        };
        _this.privacyRegex = /":(?!\[|{)\\"[^"]*\\"|":(["'])(?:(?=(\\?))\2.)*?\1|":(?!\[|{)[^,}\]]*|":\[[^{]*]/g;
        return _this;
    }
    TransactionAggregator.prototype.init = function (sendInterval) {
        var _this = this;
        if (sendInterval === void 0) { sendInterval = 30000; }
        this.worker = setInterval(function (_) {
            var data = _this.prepareAggregationforShipping();
            _this.emit('packet', { data: data });
        }, sendInterval);
    };
    TransactionAggregator.prototype.destroy = function () {
        if (this.worker !== undefined) {
            clearInterval(this.worker);
        }
        this.cache.routes = {};
    };
    TransactionAggregator.prototype.getAggregation = function () {
        return this.cache;
    };
    TransactionAggregator.prototype.validateData = function (packet) {
        if (!packet) {
            log('Packet malformated', packet);
            return false;
        }
        if (!packet.spans || !packet.spans[0]) {
            log('Trace without spans: %s', Object.keys(packet.data));
            return false;
        }
        if (!packet.spans[0].labels) {
            log('Trace spans without labels: %s', Object.keys(packet.spans));
            return false;
        }
        return true;
    };
    TransactionAggregator.prototype.aggregate = function (packet) {
        var _this = this;
        if (this.validateData(packet) === false)
            return false;
        var path = packet.spans[0].labels['http/path'];
        if (process.env.PM2_APM_CENSOR_SPAMS !== '0') {
            this.censorSpans(packet.spans);
        }
        packet.spans = packet.spans.filter(function (span) {
            return span.endTime !== span.startTime;
        });
        packet.spans.forEach(function (span) {
            span.mean = Math.round(new Date(span.endTime).getTime() - new Date(span.startTime).getTime());
            delete span.endTime;
        });
        packet.spans.forEach(function (span) {
            if (!span.name || !span.kind)
                return false;
            if (span.kind === 'RPC_SERVER') {
                _this.cache.meta.histogram.update(span.mean);
                return _this.cache.meta.http_meter.update(1);
            }
            if (span.labels && span.labels['http/method'] && span.labels['http/status_code']) {
                span.labels['service'] = span.name;
                span.name = 'outbound_http';
            }
            for (var i = 0; i < _this.spanTypes.length; i++) {
                if (span.name.indexOf(_this.spanTypes[i]) > -1) {
                    _this.cache.meta.db_meter.update(1);
                    if (!_this.cache.meta.db_histograms[_this.spanTypes[i]]) {
                        _this.cache.meta.db_histograms[_this.spanTypes[i]] = new histogram_1.default({ measurement: 'mean' });
                    }
                    _this.cache.meta.db_histograms[_this.spanTypes[i]].update(span.mean);
                    break;
                }
            }
        });
        this.cache.meta.trace_count++;
        if (path[0] === '/' && path !== '/') {
            path = path.substr(1, path.length - 1);
        }
        var matched = this.matchPath(path, this.cache.routes);
        if (!matched) {
            this.cache.routes[path] = [];
            this.mergeTrace(this.cache.routes[path], packet);
        }
        else {
            this.mergeTrace(this.cache.routes[matched], packet);
        }
        return this.cache;
    };
    TransactionAggregator.prototype.mergeTrace = function (aggregated, trace) {
        var _this = this;
        if (!aggregated || !trace)
            return;
        if (trace.spans.length === 0)
            return;
        if (!aggregated.variances)
            aggregated.variances = [];
        if (!aggregated.meta) {
            aggregated.meta = {
                histogram: new histogram_1.default({ measurement: 'median' }),
                meter: new EWMA_1.default()
            };
        }
        aggregated.meta.histogram.update(trace.spans[0].mean);
        aggregated.meta.meter.update();
        var merge = function (variance) {
            if (variance == null) {
                delete trace.projectId;
                delete trace.traceId;
                trace.histogram = new histogram_1.default({ measurement: 'median' });
                trace.histogram.update(trace.spans[0].mean);
                trace.spans.forEach(function (span) {
                    span.histogram = new histogram_1.default({ measurement: 'median' });
                    span.histogram.update(span.mean);
                    delete span.mean;
                });
                aggregated.variances.push(trace);
            }
            else {
                variance.histogram.update(trace.spans[0].mean);
                _this.updateSpanDuration(variance.spans, trace.spans);
                trace.spans.forEach(function (span) {
                    delete span.labels.stacktrace;
                });
            }
        };
        for (var i = 0; i < aggregated.variances.length; i++) {
            if (this.compareList(aggregated.variances[i].spans, trace.spans)) {
                return merge(aggregated.variances[i]);
            }
        }
        return merge(null);
    };
    TransactionAggregator.prototype.updateSpanDuration = function (spans, newSpans) {
        for (var i = 0; i < spans.length; i++) {
            if (!newSpans[i])
                continue;
            spans[i].histogram.update(newSpans[i].mean);
        }
    };
    TransactionAggregator.prototype.compareList = function (one, two) {
        if (one.length !== two.length)
            return false;
        for (var i = 0; i < one.length; i++) {
            if (one[i].name !== two[i].name)
                return false;
            if (one[i].kind !== two[i].kind)
                return false;
            if (!one[i].labels && two[i].labels)
                return false;
            if (one[i].labels && !two[i].labels)
                return false;
            if (one[i].labels.length !== two[i].labels.length)
                return false;
        }
        return true;
    };
    TransactionAggregator.prototype.matchPath = function (path, routes) {
        if (!path || !routes)
            return false;
        if (path === '/')
            return routes[path] ? path : null;
        if (path[path.length - 1] === '/') {
            path = path.substr(0, path.length - 1);
        }
        path = path.split('/');
        if (path.length === 1)
            return routes[path[0]] ? routes[path[0]] : null;
        var keys = Object.keys(routes);
        for (var i = 0; i < keys.length; i++) {
            var route = keys[i];
            var segments = route.split('/');
            if (segments.length !== path.length)
                continue;
            for (var j = path.length - 1; j >= 0; j--) {
                if (path[j] !== segments[j]) {
                    if (this.isIdentifier(path[j]) && segments[j] === '*' && path[j - 1] === segments[j - 1]) {
                        return segments.join('/');
                    }
                    else if (path[j - 1] !== undefined && path[j - 1] === segments[j - 1] && this.isIdentifier(path[j]) && this.isIdentifier(segments[j])) {
                        segments[j] = '*';
                        routes[segments.join('/')] = routes[route];
                        delete routes[keys[i]];
                        return segments.join('/');
                    }
                    else {
                        break;
                    }
                }
                if (j === 0)
                    return segments.join('/');
            }
        }
    };
    TransactionAggregator.prototype.prepareAggregationforShipping = function () {
        var _this = this;
        var routes = this.cache.routes;
        var normalized = {
            routes: [],
            meta: {
                trace_count: this.cache.meta.trace_count,
                http_meter: Math.round(this.cache.meta.http_meter.rate(1000) * 100) / 100,
                db_meter: Math.round(this.cache.meta.db_meter.rate(1000) * 100) / 100,
                http_percentiles: {
                    median: this.cache.meta.histogram.percentiles([0.5])[0.5],
                    p95: this.cache.meta.histogram.percentiles([0.95])[0.95],
                    p99: this.cache.meta.histogram.percentiles([0.99])[0.99]
                },
                db_percentiles: {}
            }
        };
        this.spanTypes.forEach(function (name) {
            var histogram = _this.cache.meta.db_histograms[name];
            if (!histogram)
                return;
            normalized.meta.db_percentiles[name] = histogram.percentiles([0.5])[0.5];
        });
        Object.keys(routes).forEach(function (path) {
            var data = routes[path];
            if (!data.variances || data.variances.length === 0)
                return;
            var variances = data.variances.sort(function (a, b) {
                return b.count - a.count;
            }).slice(0, 5);
            var routeCopy = {
                path: path === '/' ? '/' : '/' + path,
                meta: {
                    min: data.meta.histogram.getMin(),
                    max: data.meta.histogram.getMax(),
                    count: data.meta.histogram.getCount(),
                    meter: Math.round(data.meta.meter.rate(1000) * 100) / 100,
                    median: data.meta.histogram.percentiles([0.5])[0.5],
                    p95: data.meta.histogram.percentiles([0.95])[0.95]
                },
                variances: []
            };
            variances.forEach(function (variance) {
                if (!variance.spans || variance.spans.length === 0)
                    return;
                var tmp = {
                    spans: [],
                    count: variance.histogram.getCount(),
                    min: variance.histogram.getMin(),
                    max: variance.histogram.getMax(),
                    median: variance.histogram.percentiles([0.5])[0.5],
                    p95: variance.histogram.percentiles([0.95])[0.95]
                };
                variance.spans.forEach(function (oldSpan) {
                    var span = fclone({
                        name: oldSpan.name,
                        labels: oldSpan.labels,
                        kind: oldSpan.kind,
                        startTime: oldSpan.startTime,
                        min: oldSpan.histogram ? oldSpan.histogram.getMin() : undefined,
                        max: oldSpan.histogram ? oldSpan.histogram.getMax() : undefined,
                        median: oldSpan.histogram ? oldSpan.histogram.percentiles([0.5])[0.5] : undefined
                    });
                    tmp.spans.push(span);
                });
                routeCopy.variances.push(tmp);
            });
            normalized.routes.push(routeCopy);
        });
        log("sending formatted trace to remote endpoint");
        return normalized;
    };
    TransactionAggregator.prototype.isIdentifier = function (id) {
        id = typeof (id) !== 'string' ? id + '' : id;
        if (id.match(/[0-9a-f]{8}-[0-9a-f]{4}-[14][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}|[0-9a-f]{12}[14][0-9a-f]{19}/i)) {
            return true;
        }
        else if (id.match(/\d+/)) {
            return true;
        }
        else if (id.match(/[0-9]+[a-z]+|[a-z]+[0-9]+/)) {
            return true;
        }
        else if (id.match(/((?:[0-9a-zA-Z]+[@\-_.][0-9a-zA-Z]+|[0-9a-zA-Z]+[@\-_.]|[@\-_.][0-9a-zA-Z]+)+)/)) {
            return true;
        }
        return false;
    };
    TransactionAggregator.prototype.censorSpans = function (spans) {
        var _this = this;
        if (!spans)
            return log('spans is null');
        spans.forEach(function (span) {
            if (!span.labels)
                return;
            delete span.labels.results;
            delete span.labels.result;
            delete span.spanId;
            delete span.parentSpanId;
            delete span.labels.values;
            delete span.labels.stacktrace;
            Object.keys(span.labels).forEach(function (key) {
                if (typeof (span.labels[key]) === 'string' && key !== 'stacktrace') {
                    span.labels[key] = span.labels[key].replace(_this.privacyRegex, '\": \"?\"');
                }
            });
        });
    };
    return TransactionAggregator;
}(eventemitter2_1.EventEmitter2));
exports.TransactionAggregator = TransactionAggregator;
//# sourceMappingURL=data:application/json;base64,